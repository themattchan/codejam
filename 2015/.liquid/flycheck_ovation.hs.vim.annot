11:1-11:10::StandingOvation.countZero :: "[GHC.Types.Char] -> GHC.Types.Int"
11:13-11:19::lq_anf__d2Yp :: "x1:[GHC.Types.Char] -> {v : GHC.Types.Int | v == len x1}"
11:20-11:21::_ :: "([GHC.Types.Char] -> GHC.Types.Int)\n-> ([GHC.Types.Char] -> [GHC.Types.Char])\n-> [GHC.Types.Char]\n-> exists [[GHC.Types.Char]].GHC.Types.Int"
11:22-11:28::_ :: "(GHC.Types.Char -> GHC.Types.Bool)\n-> x3:[GHC.Types.Char] -> {v : [GHC.Types.Char] | len v <= len x3}"
11:30-11:32::_ :: "x1:GHC.Types.Char\n-> x2:GHC.Types.Char -> {v : GHC.Types.Bool | Prop v <=> x1 == v}"
11:33-11:36::_ :: "GHC.Types.Char"
14:1-14:8::StandingOvation.readInt :: "[GHC.Types.Char] -> GHC.Types.Int"
14:11-14:15::GHC.Read.$fReadInt :: "{v : (GHC.Read.Read GHC.Types.Int) | v == GHC.Read.$fReadInt}"
17:1-17:13::StandingOvation.formatOutput :: "GHC.Types.Int -> GHC.Types.Int -> [GHC.Types.Char]"
17:16-17:22::_ :: "[GHC.Types.Char]\n-> GHC.Types.Int -> GHC.Types.Int -> [GHC.Types.Char]"
17:23-17:37::lq_anf__d2Ys :: "{v : [GHC.Types.Char] | len v >= 0}"
19:1-19:7::StandingOvation.inFile :: "[GHC.Types.Char]"
19:10-19:31::GHC.CString.unpackCString# :: "GHC.Prim.Addr# -> [GHC.Types.Char]"
22:1-22:5::StandingOvation.main :: "(GHC.Types.IO ())"
23:3-23:8::input :: "[[GHC.Types.Char]]"
23:12-23:20::_ :: "[GHC.Types.Char]\n-> GHC.IO.IOMode.IOMode\n-> (GHC.Types.IO GHC.IO.Handle.Types.Handle)"
23:21-23:27::StandingOvation.inFile :: "{v : [GHC.Types.Char] | v == StandingOvation.inFile && len v >= 0}"
23:28-23:36::GHC.IO.IOMode.ReadMode :: "{v : GHC.IO.IOMode.IOMode | v == GHC.IO.IOMode.ReadMode}"
24:12-24:15::_ :: "(GHC.Types.IO GHC.IO.Handle.Types.Handle)\n-> (GHC.IO.Handle.Types.Handle -> (GHC.Types.IO [GHC.Types.Char]))\n-> (GHC.Types.IO [GHC.Types.Char])"
24:16-24:28::GHC.IO.Handle.Text.hGetContents :: "GHC.IO.Handle.Types.Handle -> (GHC.Types.IO [GHC.Types.Char])"
24:29-24:32::_ :: "(GHC.Types.IO [GHC.Types.Char])\n-> ([GHC.Types.Char] -> (GHC.Types.IO [[GHC.Types.Char]]))\n-> (GHC.Types.IO [[GHC.Types.Char]])"
24:33-24:39::lq_anf__d2Yv :: "[[GHC.Types.Char]] -> (GHC.Types.IO [[GHC.Types.Char]])"
24:40-24:41::_ :: "([[GHC.Types.Char]] -> (GHC.Types.IO [[GHC.Types.Char]]))\n-> ([GHC.Types.Char] -> [[GHC.Types.Char]])\n-> [GHC.Types.Char]\n-> exists [[[GHC.Types.Char]]].(GHC.Types.IO [[GHC.Types.Char]])"
24:42-24:47::Data.List.lines :: "[GHC.Types.Char] -> [[GHC.Types.Char]]"
25:7-25:15::numTimes :: "GHC.Types.Int"
25:18-25:25::_ :: "[GHC.Types.Char] -> GHC.Types.Int"
25:27-25:31::_ :: "{v : [[GHC.Types.Char]] | len v > 0} -> [GHC.Types.Char]"
25:32-25:37::input :: "{v : [[GHC.Types.Char]] | v == input && len v >= 0}"
26:7-26:13::trials :: "{v : [GHC.Types.Int] | len v >= 0}"
26:18-26:21::_ :: "([GHC.Types.Char] -> GHC.Types.Int)\n-> x3:[[GHC.Types.Char]] -> {v : [GHC.Types.Int] | len v == len x3}"
26:22-26:31::StandingOvation.countZero :: "[GHC.Types.Char] -> GHC.Types.Int"
26:32-26:33::_ :: "(x2:[[GHC.Types.Char]]\n -> {v : [GHC.Types.Int] | len v == len x2 && len v >= 0})\n-> ({v : [[GHC.Types.Char]] | v /= input && len v >= 0 && len v < len input}\n    -> [[GHC.Types.Char]])\n-> {v : [[GHC.Types.Char]] | v /= input && len v >= 0 && len v < len input}\n-> exists [z:[[GHC.Types.Char]]].{v : [GHC.Types.Int] | len v == len z && len v >= 0}"
26:34-26:43::_ :: "([GHC.Types.Char] -> [[GHC.Types.Char]])\n-> [[GHC.Types.Char]] -> [[GHC.Types.Char]]"
26:45-26:49::lq_anf__d2Yz :: "x1:{v : [[GHC.Types.Char]] | len v > 0}\n-> {v : [[GHC.Types.Char]] | len v == len x1 - 1}"
26:50-26:51::_ :: "([[GHC.Types.Char]] -> [[GHC.Types.Char]])\n-> ([GHC.Types.Char] -> [[GHC.Types.Char]])\n-> [GHC.Types.Char]\n-> exists [[[GHC.Types.Char]]].[[GHC.Types.Char]]"
26:52-26:59::_ :: "[GHC.Types.Char] -> [GHC.Types.Char] -> [[GHC.Types.Char]]"
26:60-26:63::lq_anf__d2YC :: "{v : [GHC.Types.Char] | null v <=> false && len v >= 0}"
26:65-26:66::_ :: "({v : [[GHC.Types.Char]] | v /= input && len v >= 0 && len v < len input}\n -> {v : [GHC.Types.Int] | len v >= 0})\n-> {v : [[GHC.Types.Char]] | v /= input && len v >= 0 && len v < len input}\n-> {v : [GHC.Types.Int] | len v >= 0}"
26:67-26:71::_ :: "x1:{v : [[GHC.Types.Char]] | len v > 0}\n-> {v : [[GHC.Types.Char]] | len v == len x1 - 1}"
26:72-26:77::input :: "{v : [[GHC.Types.Char]] | v == input && len v >= 0}"
27:3-27:12::_ :: "[GHC.Types.Char] -> [GHC.Types.Char] -> (GHC.Types.IO ())"
27:13-27:20::lq_anf__d2YJ :: "{v : [GHC.Types.Char] | len v >= 0}"
27:21-27:22::_ :: "([GHC.Types.Char] -> (GHC.Types.IO ()))\n-> ([[GHC.Types.Char]] -> [GHC.Types.Char])\n-> [[GHC.Types.Char]]\n-> exists [[GHC.Types.Char]].(GHC.Types.IO ())"
27:23-27:30::Data.List.unlines :: "[[GHC.Types.Char]] -> [GHC.Types.Char]"
27:31-27:32::_ :: "([[GHC.Types.Char]] -> (GHC.Types.IO ()))\n-> [[GHC.Types.Char]] -> (GHC.Types.IO ())"
27:33-27:40::_ :: "(GHC.Types.Int -> GHC.Types.Int -> [GHC.Types.Char])\n-> x4:[GHC.Types.Int]\n-> x5:[GHC.Types.Int]\n-> {v : [[GHC.Types.Char]] | len v <= len x4 && len v <= len x5}"
27:41-27:53::StandingOvation.formatOutput :: "GHC.Types.Int -> GHC.Types.Int -> [GHC.Types.Char]"
27:54-27:67::lq_anf__d2YN :: "{v : [GHC.Types.Int] | len v >= 0}"
27:55-27:56::lq_anf__d2YM :: "{v : GHC.Types.Int | v == (1  :  int)}"
27:58-27:66::numTimes :: "{v : GHC.Types.Int | v == numTimes}"
27:68-27:74::trials :: "{v : [GHC.Types.Int] | v == trials && len v >= 0}"